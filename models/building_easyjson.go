// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1cf24d94DecodeGithubComZhuharevGameModels(in *jlexer.Lexer, out *BuildingWithOwner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner":
			easyjson1cf24d94DecodeGithubComZhuharevGameModels1(in, &out.Owner)
		case "id":
			out.Id = int64(in.Int64())
		case "long":
			out.Long = float64(in.Float64())
		case "lat":
			out.Lat = float64(in.Float64())
		case "owner_id":
			out.OwnerId = int64(in.Int64())
		case "owner_name":
			out.OwnerName = string(in.String())
		case "area":
			out.Area = int(in.Int())
		case "armor":
			out.Armor = int64(in.Int64())
		case "profit":
			out.Profit = int64(in.Int64())
		case "refresh":
			out.Refresh = int64(in.Int64())
		case "profit_time":
			out.ProfitTime = int(in.Int())
		case "blocked":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Blocked).UnmarshalJSON(data))
			}
		case "blocked_duration":
			out.BlockedDuration = time.Duration(in.Int64())
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94EncodeGithubComZhuharevGameModels(out *jwriter.Writer, in BuildingWithOwner) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner\":")
	easyjson1cf24d94EncodeGithubComZhuharevGameModels1(out, in.Owner)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"long\":")
	out.Float64(float64(in.Long))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lat\":")
	out.Float64(float64(in.Lat))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_id\":")
	out.Int64(int64(in.OwnerId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_name\":")
	out.String(string(in.OwnerName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"area\":")
	out.Int(int(in.Area))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"armor\":")
	out.Int64(int64(in.Armor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"profit\":")
	out.Int64(int64(in.Profit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"refresh\":")
	out.Int64(int64(in.Refresh))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"profit_time\":")
	out.Int(int(in.ProfitTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocked\":")
	out.Raw((in.Blocked).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocked_duration\":")
	out.Int64(int64(in.BlockedDuration))
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updated\":")
		out.Raw((in.Updated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildingWithOwner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf24d94EncodeGithubComZhuharevGameModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildingWithOwner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf24d94EncodeGithubComZhuharevGameModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildingWithOwner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf24d94DecodeGithubComZhuharevGameModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildingWithOwner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf24d94DecodeGithubComZhuharevGameModels(l, v)
}
func easyjson1cf24d94DecodeGithubComZhuharevGameModels1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "vk_id":
			out.VkId = int64(in.Int64())
		case "vk_token":
			out.VkToken = string(in.String())
		case "lon":
			out.Lon = float64(in.Float64())
		case "lat":
			out.Lat = float64(in.Float64())
		case "username":
			out.Username = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "sex":
			out.Sex = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "balance":
			out.Balance = Balance(in.Int64())
		case "profit":
			out.Profit = int64(in.Int64())
		case "goods":
			easyjson1cf24d94DecodeGithubComZhuharevGameModels2(in, &out.Goods)
		case "token":
			out.Token = string(in.String())
		case "fcm_token":
			out.FCMToken = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94EncodeGithubComZhuharevGameModels1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.Id))
	if in.VkId != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vk_id\":")
		out.Int64(int64(in.VkId))
	}
	if in.VkToken != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vk_token\":")
		out.String(string(in.VkToken))
	}
	if in.Lon != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lon\":")
		out.Float64(float64(in.Lon))
	}
	if in.Lat != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lat\":")
		out.Float64(float64(in.Lat))
	}
	if in.Username != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"username\":")
		out.String(string(in.Username))
	}
	if in.FullName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"full_name\":")
		out.String(string(in.FullName))
	}
	if in.Sex != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sex\":")
		out.Int(int(in.Sex))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avatar_url\":")
	out.String(string(in.AvatarURL))
	if in.Balance != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"balance\":")
		out.Raw((in.Balance).MarshalJSON())
	}
	if in.Profit != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"profit\":")
		out.Int64(int64(in.Profit))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"goods\":")
		easyjson1cf24d94EncodeGithubComZhuharevGameModels2(out, in.Goods)
	}
	if in.Token != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"token\":")
		out.String(string(in.Token))
	}
	if in.FCMToken != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"fcm_token\":")
		out.String(string(in.FCMToken))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"created\":")
		out.Raw((in.Created).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson1cf24d94DecodeGithubComZhuharevGameModels2(in *jlexer.Lexer, out *Goods) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "buildings":
			if in.IsNull() {
				in.Skip()
				out.Buildings = nil
			} else {
				in.Delim('[')
				if out.Buildings == nil {
					if !in.IsDelim(']') {
						out.Buildings = make([]Building, 0, 1)
					} else {
						out.Buildings = []Building{}
					}
				} else {
					out.Buildings = (out.Buildings)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Building
					easyjson1cf24d94DecodeGithubComZhuharevGameModels3(in, &v1)
					out.Buildings = append(out.Buildings, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94EncodeGithubComZhuharevGameModels2(out *jwriter.Writer, in Goods) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"count\":")
	out.Int(int(in.Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"buildings\":")
	if in.Buildings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Buildings {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson1cf24d94EncodeGithubComZhuharevGameModels3(out, v3)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson1cf24d94DecodeGithubComZhuharevGameModels3(in *jlexer.Lexer, out *Building) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "long":
			out.Long = float64(in.Float64())
		case "lat":
			out.Lat = float64(in.Float64())
		case "owner_id":
			out.OwnerId = int64(in.Int64())
		case "owner_name":
			out.OwnerName = string(in.String())
		case "area":
			out.Area = int(in.Int())
		case "armor":
			out.Armor = int64(in.Int64())
		case "profit":
			out.Profit = int64(in.Int64())
		case "refresh":
			out.Refresh = int64(in.Int64())
		case "profit_time":
			out.ProfitTime = int(in.Int())
		case "blocked":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Blocked).UnmarshalJSON(data))
			}
		case "blocked_duration":
			out.BlockedDuration = time.Duration(in.Int64())
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94EncodeGithubComZhuharevGameModels3(out *jwriter.Writer, in Building) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"long\":")
	out.Float64(float64(in.Long))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lat\":")
	out.Float64(float64(in.Lat))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_id\":")
	out.Int64(int64(in.OwnerId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_name\":")
	out.String(string(in.OwnerName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"area\":")
	out.Int(int(in.Area))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"armor\":")
	out.Int64(int64(in.Armor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"profit\":")
	out.Int64(int64(in.Profit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"refresh\":")
	out.Int64(int64(in.Refresh))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"profit_time\":")
	out.Int(int(in.ProfitTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocked\":")
	out.Raw((in.Blocked).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocked_duration\":")
	out.Int64(int64(in.BlockedDuration))
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"updated\":")
		out.Raw((in.Updated).MarshalJSON())
	}
	out.RawByte('}')
}
